#include <CL/cl.hpp>
#include <utility>
#include <iostream>
#include <fstream>
#include <string>


int main() {
	std::vector<cl::Platform> platforms;
	cl::Platform::get(&platforms);

	// Select the default platform and create a context using this platform and the GPU
	cl_context_properties cps[3] = {
		CL_CONTEXT_PLATFORM,
		(cl_context_properties)(platforms[0])(),
		0
	};
	cl::Context context(CL_DEVICE_TYPE_GPU, cps);

	// Get a list of devices on this platform
	std::vector<cl::Device> devices = context.getInfo<CL_CONTEXT_DEVICES>();

	// Create a command queue and use the first device
	cl::CommandQueue queue = cl::CommandQueue(context, devices[0]);

	// Read source file
	std::ifstream sourceFile("linear_search.cl");
	std::string sourceCode(
		std::istreambuf_iterator<char>(sourceFile),
		(std::istreambuf_iterator<char>()));
	cl::Program::Sources source(1, std::make_pair(sourceCode.c_str(), sourceCode.length() + 1));

	// Make program of the source code in the context
	cl::Program program = cl::Program(context, source);

	// Build program for these specific devices
	program.build(devices);
	float A[] = { 0, 1, 2, 3, 4, 5, 6,7 };
	// Make kernel
	cl::Kernel kernel(program, "linear_search");

	cl::Buffer input(context, CL_MEM_READ_WRITE, sizeof(float) * 16);
	cl::Buffer output(context, CL_MEM_READ_WRITE, sizeof(float));

	int n = 7;
	//create queue to which we will push commands for the device.
	queue.enqueueWriteBuffer(input, CL_TRUE, 0, sizeof(float) * 16, A);
	//alternative way to run the kernel
	cl::Kernel kernel_add = cl::Kernel(program, "linear_search");
  
	kernel_add.setArg(0, input);
	kernel_add.setArg(1, output);
	kernel_add.setArg(2, n);

	queue.enqueueNDRangeKernel(kernel_add,cl::NullRange,cl::NDRange(8), cl::NDRange(8));
	queue.finish();

	 float op[16];
	//read result C from the device to array C
	queue.enqueueReadBuffer(output, CL_TRUE, 0, sizeof(float), op);

	std::cout << " result: \n";
	//for (int i = 0; i < 8; i++) {
		std::cout <<op[0]<<" ";
	//}
	getchar();
	return 0;
}